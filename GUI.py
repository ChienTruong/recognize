#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 10, 2017 08:25:14 PM
import sys
import identify as idt
import json
import readDirectory
import urllib

from tkFileDialog import askopenfilename, askdirectory

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

import tkMessageBox

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel_1 (root)
    root.mainloop()

w = None
subscription_key = 'b21ca23853d34294a10eebd5ec501380'
groupId = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1'

# change 16/10
objectRequest = {
 'groupId': groupId,
 'connect': 'westcentralus.api.cognitive.microsoft.com',
 'headers': {
    'Ocp-Apim-Subscription-Key': subscription_key
 },
 'params': urllib.urlencode({
 })
}
#

def quit():
    global root
    root.quit()

def addImage(model):
    Tk().withdraw()
    filePath = askopenfilename(initialdir="/home/chien/Downloads")
    if filePath != '':
     model.image.configure(file=filePath)
     model.pathImage = filePath
     model.canvas.pack(fill=BOTH, expand=1)
     model.canvas.create_image(0, 0, anchor=NW, image=model.image)
    else:
     print model.pathImage

#def allertError(str):
    #tkMessageBox

def drawing(model, persons):
    for person in persons:
     Clea(model, person['faceRectangle'])

def identify(model):
    #cha1nge 17/10
    persons = idt.identifyFace(model.pathImage, subscription_key)
    if type(persons) is dict:
     drawing(model, persons)
    else:
     alertError(persons)    

def training():
    directory = askdirectory(initialdir="/home/chien/Pictures/Face_Cognitive")
    readDirectory.readDirectory(directory, objectRequest)

def test(model):
 model.canvas.pack(fill=BOTH, expand=1)
 model.canvas.create_image(0, 0, anchor=NW, image=model.image)
 model.canvas.create_line(0, 0, 300, 300, fill="red")

def test1(model):
 model.canvas.delete('all')

class New_Toplevel_1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("598x450+410+100")
        top.title("GUI")

	self.image = PhotoImage()
	self.pathImage = ''
        
        self.Frame1 = Label(top, image=self.image)
        self.canvas = Canvas(self.Frame1)
        self.Frame1.place(relx=0.02, rely=0.02, relheight=0.97, relwidth=0.63)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(width=375)



        self.AddImage = Button(top)
        self.AddImage.place(relx=0.67, rely=0.02, height=36, width=187)
        self.AddImage.configure(activebackground="#d9d9d9")
        self.AddImage.configure(text='''+Image''')
	self.AddImage.configure(command=lambda model=self: addImage(model))
        self.AddImage.configure(width=187)


        self.Button3 = Button(top)
        self.Button3.place(relx=0.67, rely=0.11, height=36, width=187)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(text='''Identify''')
	self.Button3.configure(command=lambda model=self: identify(model))
        self.Button3.configure(width=187)

        self.Button4 = Button(top)
        self.Button4.place(relx=0.67, rely=0.2, height=36, width=187)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(text='''Clear''')
	self.Button4.configure(command=lambda model=self: test(model))
        self.Button4.configure(width=187)

        self.Button5 = Button(top)
        self.Button5.place(relx=0.67, rely=0.29, height=36, width=187)
        self.Button5.configure(activebackground="#d9d9d9")
	self.Button5.configure(command=lambda model=self: test1(model))
        self.Button5.configure(width=187)

        self.Button6 = Button(top)
        self.Button6.place(relx=0.67, rely=0.38, height=36, width=187)
        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(text='''Quit''')
	self.Button6.configure(command=quit)
        self.Button6.configure(width=187)

        self.Button7 = Button(top)
        self.Button7.place(relx=0.69, rely=0.82, height=66, width=177)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(text='''Training''')
	self.Button7.configure(command=training)
        self.Button7.configure(width=177)






if __name__ == '__main__':
    vp_start_gui()



